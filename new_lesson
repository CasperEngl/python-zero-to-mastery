#!/usr/bin/env python3

import os
import re
import subprocess


def find_lesson_dirs(number_of_commits=1):
    # Search for the lesson directory in the git diff output
    diff_output = subprocess.check_output(["git", "diff", f"HEAD~{number_of_commits}", "--name-status", "-r"])

    lesson_dirs = []
    for line in diff_output.decode().splitlines():
        status, path = line.split("\t")
        abs_path = os.path.abspath(path)  # Convert to absolute path
        abs_path = os.path.dirname(abs_path)  # Remove filename from path

        if status.startswith(("A", "M", "R")) and os.path.isdir(abs_path):
            match = re.match(r"^(\d{1,3})\. (.+)$", os.path.basename(abs_path))

            if match:
                lesson_id = int(match.group(1))

                lesson_dirs.append(abs_path)

    return lesson_dirs


def find_lesson_ids(lesson_directories):
    lesson_ids = []
    for lesson_directory in lesson_directories:
        # Search for the lesson ID in the lesson directory name
        match = re.match(r"^(\d{1,3})\. (.+)$", os.path.basename(lesson_directory))

        if match:
            lesson_id = int(match.group(1))
            lesson_ids.append(lesson_id)

    return lesson_ids


def find_lesson_name(lesson_directories, lesson_id):
    for lesson_directory in lesson_directories:
        # Search for the lesson ID in the lesson directory name
        match = re.match(r"^(\d{1,3})\. (.+)$", os.path.basename(lesson_directory))

        if match:
            current_lesson_id = int(match.group(1))
            if current_lesson_id == lesson_id:
                # Return the lesson name if the ID matches
                return match.group(2)

    # Return None if the lesson ID was not found
    return None


def create_lesson_dir(lesson_id, lesson_name):
    # Create the lesson directory
    lesson_dir_name = f"{lesson_id}. {lesson_name}"
    os.mkdir(lesson_dir_name)

    # Create the main.py file and write the directory name as a title
    with open(os.path.join(lesson_dir_name, "main.py"), "w") as f:
        f.write(f"# {lesson_dir_name}\n")

    return lesson_dir_name


# Example usage

lesson_ids = []
number_of_commits = 1

lesson_dirs = find_lesson_dirs()

while not lesson_dirs:
    if number_of_commits == 1:
        number_of_commits = int(input("No lesson ID found. Enter the number of commits to search: "))

    lesson_dirs = find_lesson_dirs(number_of_commits)

lesson_id = max(find_lesson_ids(lesson_dirs))
new_lesson_id = int(lesson_id) + 1


# If the lesson directory is found, create the lesson directory
if lesson_id:
    print(f"Found previous lesson ID: {lesson_id}")
    print(f"New lesson ID: {new_lesson_id}")

    lesson_dir_name = create_lesson_dir(new_lesson_id, input("Enter the lesson name: "))

    print(f"\n\nCreated lesson directory:\n{lesson_dir_name} ðŸŽ‰")

# If the lesson directory is not found, ask the user for the lesson ID and name
else:
    print("Could not find previous lesson ID.")

    lesson_id = int(input("Enter the lesson ID: "))
    lesson_name = input("Enter the lesson name: ")

    lesson_dir_name = create_lesson_dir(lesson_id, lesson_name)

    print(f"\n\nCreated lesson directory:\n{lesson_dir_name} ðŸŽ‰")
